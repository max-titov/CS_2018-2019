
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class PanelBlackjack extends JPanel {

	public static final int WIDTH = 1200;
	public static final int HEIGHT = 800;
	public static final Color BACKGROUND = new Color(0, 128, 43);

	public static final int CARDWIDTH = 500;
	public static final int CARDHEIGHT = 726;

	private final int delayLength = 50;

	private BufferedImage image;

	private BlackjackGameManager manager;

	private int numberOfPlayers;

	public PanelBlackjack() {
		numberOfPlayers = 2;
		// initialize manager
		manager = new BlackjackGameManager(numberOfPlayers, this);

		// set up graphics
		getPanelGraphics();
		
		Thread graphicsThread = new Thread(new GraphicsRunnable());
		graphicsThread.start();
		
		Thread logicThread = new Thread(new LogicRunnable());
		logicThread.start();
	}

	public void paintComponent(Graphics g) {
		g.drawImage(image, 0, 0, getWidth(), getHeight(), null);
	}

	private Graphics getPanelGraphics() {

		if (null == image) {
			image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		}
		Graphics graphics = image.getGraphics();
		graphics.setColor(BACKGROUND);
		graphics.fillRect(0, 0, WIDTH, HEIGHT);
		return graphics;

	}
	public class LogicRunnable implements Runnable {

	    public void run(){
	       manager.playRound();
	       try {
				Thread.sleep(delayLength);
			} catch (InterruptedException ex) {
				Thread.currentThread().interrupt();
			}
	    }
	  }
	
	public class GraphicsRunnable implements Runnable {

	    public void run(){
	       draw();
	       System.out.println("test");
	       try {
				Thread.sleep(delayLength);
			} catch (InterruptedException ex) {
				Thread.currentThread().interrupt();
			}
	    }
	  }

	public void updateGraphics() {
		try {
			SwingUtilities.invokeAndWait(new Runnable() {
				@Override
				public void run() {
					draw();
					try {
						Thread.sleep(delayLength);
					} catch (InterruptedException ex) {
						Thread.currentThread().interrupt();
					}
				}
			});
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void draw() {
		Graphics g = getPanelGraphics();
		ArrayList<BlackjackPlayer> players = manager.getPlayers();
		BlackjackPlayer dealer = manager.getDealer();

		for (int i = 0; i < players.size(); i++) { // iterates through all players
			for (int c = 0; c < players.get(i).getHand().size(); c++) {// iterates through all cards
				drawCard(g, players.get(i).getHand().get(c), 50 + i * 200 + c * 25, 500 + c * 25, 0.2);
			}
		}

		repaint();

//		try {
//			Thread.sleep(20); // sleep for 20 milliseconds
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
	}

	public void drawCard(Graphics g, Card card, int x, int y, double size) {
		try {
			BufferedImage cardImage = ImageIO.read(new File("src/card_images/" + card.getSimple() + ".png"));
			double scalar = 1 / size;
			g.drawImage(cardImage, x, y, (int) (CARDWIDTH / scalar), (int) (CARDHEIGHT / scalar), null);
		} catch (IOException ex) {
			System.out.println("could not find image: " + card.getSimple() + ".png");
		}
	}

}
